// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	LumenCardPixelShader.usf
=============================================================================*/

#include "../Common.ush"
#include "../BRDF.ush"

#define SceneTexturesStruct LumenCardPass.SceneTextures 

#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

struct FLumenCardInterpolantsVSToPS
{

};

void Main(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FLumenCardInterpolantsVSToPS PassInterpolants,
	in INPUT_POSITION_QUALIFIERS float4 SvPosition : SV_Position		// after all interpolators
	OPTIONAL_IsFrontFace,
	out float4 OutTarget0 : SV_Target0,
	out float4 OutTarget1 : SV_Target1,
	out float4 OutTarget2 : SV_Target2)
{
	ResolvedView = ResolveView();

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	
	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
	}

	GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);

	float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);

	float Roughness = GetMaterialRoughness(PixelMaterialInputs);
	float Opacity = GetMaterialOpacity(PixelMaterialInputs);

	float3 DiffuseColor = BaseColor - BaseColor * Metallic;
	float3 SpecularColor = lerp(0.08 * Specular.xxx, BaseColor, Metallic.xxx);

	EnvBRDFApproxFullyRough(DiffuseColor, SpecularColor);

	//@todo DynamicGI better encoding for low precision, hemispherical normal encoding
	OutTarget0 = float4(sqrt(DiffuseColor), Opacity);
	OutTarget1 = float4(MaterialParameters.WorldNormal * .5f + .5f, 0);
	OutTarget2 = float4(GetMaterialEmissive(PixelMaterialInputs), 0);
}
