// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PointLight.usf: Light sampling functions for Point light implementation
===============================================================================================*/

#pragma once

#include "PathTracingLightCommon.ush"

float4 PointLight_TraceLight(RayDesc Ray, int LightId, inout float HitT)
{
	float3 LightPosition = GetPosition(LightId);
	float LightRadius = GetRadius(LightId);
	float LightRadius2 = Pow2(LightRadius);

	float3 oc = Ray.Origin - LightPosition;

	float LightDistanceSquared = dot(oc, oc);

	// #dxr_todo: switch to numericaly stable ray/sphere test?
	float a = dot(Ray.Direction, Ray.Direction);
	float b = dot(oc, Ray.Direction);
	float c = LightDistanceSquared - LightRadius2;
	float h = b * b - a * c;
	if (h >= 0)
	{
		h = sqrt(h);
		float t = (-b - h) / a;
		if (t > Ray.TMin && t < HitT)
		{
			HitT = t;
			// #dxr_todo: sphere area is 4*pi*r^2 -- but the factor of 4 is missing for some reason?
			float3 LightPower = GetColor(LightId) * ComputeIESAttenuation(LightId, Ray.Origin);
			float3 LightRadiance = LightPower / (PI * LightRadius2);
			LightRadiance *= ComputeAttenuationFalloff(LightDistanceSquared, LightId);

			float SinThetaMax2 = saturate(LightRadius2 / LightDistanceSquared);
			float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

			float SolidAngle = 2 * PI * OneMinusCosThetaMax;
			return float4(LightRadiance, 1.0 / SolidAngle);
		}
		// #dxr_todo: process inside hit here ...
		// How should we define radiance on the inside of the sphere?
	}
	return 0.0;
}

void PointLight_SampleLight(
	int LightId,
	float4 RandSample,
	float3 WorldPos,
	float3 WorldNormal,
	out float3 OutDirection,
	out float  OutDistance,
	out float3 OutRadianceOverPdf,
	out float OutPdf)
{
	float Radius = GetRadius(LightId);

	// Sample the solid angle subtended by the sphere (which could be singgular, in which case the PDF will be infinite)
	float3 LightDirection = GetPosition(LightId) - WorldPos;
	float LightDistanceSquared = dot(LightDirection, LightDirection);
	float Radius2 = Pow2(Radius);

	// #dxr_todo: come up with a better definition when we are inside the light
	float SinThetaMax2 = saturate(Radius2 / LightDistanceSquared);

	// #dxr_todo: find a better way of handling the region inside the light than just clamping to 1.0 here
	float4 DirAndPdf = UniformSampleConeRobust(RandSample.yz, SinThetaMax2);

	float CosTheta = DirAndPdf.z;
	float SinTheta2 = 1.0 - CosTheta * CosTheta;

	OutDirection = TangentToWorld(DirAndPdf.xyz, normalize(LightDirection));
	OutDistance = length(LightDirection) * (CosTheta - sqrt(max(SinThetaMax2 - SinTheta2, 0.0)));

	OutPdf = DirAndPdf.w;

	float3 LightPower = GetColor(LightId) * ComputeIESAttenuation(LightId, WorldPos);
	float3 LightRadiance = LightPower / (PI * Radius2);

	// When the angle is very small, Radiance over pdf simplifies even more since SolidAngle ~= PI * SinThetaMax2
	// Canceling out common factors further leads to the classic Power / D^2 formula
	OutRadianceOverPdf = SinThetaMax2 < 0.001 ? LightPower / LightDistanceSquared : LightRadiance / OutPdf;
	OutRadianceOverPdf *= ComputeAttenuationFalloff(LightDistanceSquared, LightId);
}

void PointLight_EstimateLight(
	int LightId,
	float3 WorldPos,
	float3 WorldNormal,
	bool IsTransmissiveMaterial,
	out float OutIrradiance
)
{
	// Distance
	float3 LightDirection = GetPosition(LightId) - WorldPos;
	float LightDistanceSquared = dot(LightDirection, LightDirection);

	// Geometric term
	float NoL = 1.0; // trivial upper bound -- trying to be more accurate appears to reduce performance

	float LightPower = Luminance(GetColor(LightId));
	float Falloff = ComputeAttenuationFalloff(LightDistanceSquared, LightId);
	OutIrradiance = LightPower * Falloff * NoL / LightDistanceSquared;
}
