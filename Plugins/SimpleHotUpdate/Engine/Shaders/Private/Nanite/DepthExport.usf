// Copyright Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../SceneData.ush"
#include "../DeferredShadingCommon.ush"
#include "../HTileEncoding.ush"

#if PLATFORM_SUPPORTS_HTILE_LOOKUP

#include "NaniteDataDecode.ush"
#include "NaniteAttributeDecode.ush"

// .x = platform config
// .y = tiles wide
// .z = "decal receive" stencil value
// .w = unused
uint4 DepthExportConfig;

// Requirements:
// COMPILER_SUPPORTS_TO_SCALAR_MEMORY
// COMPILER_SUPPORTS_WAVE_ONCE
// COMPILER_SUPPORTS_WAVE_MINMAX
// PLATFORM_SUPPORTS_HTILE_LOOKUP

Texture2D<UlongType>		VisBuffer64;

RWTexture2D<float4>			Velocity;
RWTexture2D<uint>			NaniteMask;

RWStructuredBuffer<uint>	SceneHTile;
RWTexture2D<float>			SceneDepth;
RWTexture2D<uint>			SceneStencil;

RWStructuredBuffer<uint>	MaterialHTile;
RWTexture2D<float>			MaterialDepth;

ByteAddressBuffer			MaterialDepthTable;
ByteAddressBuffer			MaterialHitProxyTable;

uint EncodeTileMinMaxDepth(float MinDepth, float MaxDepth, uint PlatformConfig)
{
	BRANCH
	if (IsHiStencilTileConfig(PlatformConfig))
	{
		return EncodeTileStencilZBaseDelta(
			MinDepth,
			MaxDepth,
			HTILE_DEFAULT_XX,
			HTILE_DEFAULT_SMEM,
			HTILE_DEFAULT_SR0,
			HTILE_DEFAULT_SR1
		);
	}
	else
	{
		return EncodeTileMinMaxDepth(MinDepth, MaxDepth);
	}
}

[numthreads(HTILE_PIXELS_PER_TILE_WIDE, HTILE_PIXELS_PER_TILE_TALL, 1)]
void DepthExport(uint3 PixelPos : SV_DispatchThreadID)
{
	const uint PlatformConfig	= DepthExportConfig.x;
	const uint PixelsWide		= DepthExportConfig.y;

	const UlongType VisPixel = VisBuffer64[PixelPos.xy];

	// Calculate the HTile tile index and scalarize.
	// With the same resolution between scene and material HTile, we can use the same tile index
	// for both depth exports as an optimization.
	const uint TileIndex = ToScalarMemory(ComputeTileOffset(PixelPos.xy, PixelsWide, PlatformConfig));

// TODO: Velocity
#if 0
	FNaniteView NaniteView = GetNaniteView(0);
#endif

	uint DepthInt = 0;
	uint VisibleClusterIndex = 0;
	uint TriIndex = 0;
	UnpackVisPixel(VisPixel, DepthInt, VisibleClusterIndex, TriIndex);

	// Use default background material depth value
	float MaterialDepthValue = 0.0f;

	// Avoid the parallel reduction and exports if the tile has no Nanite
	// pixels. This is an optimization of course, but it also will preserve
	// existing plane equation compression for scene depth tiles rasterized
	// outside of Nanite.
	const bool TileHasNanite = WaveActiveAnyTrue(VisibleClusterIndex != 0xFFFFFFFF);
	if (TileHasNanite)
	{
		float SceneDepthValue = SceneDepth[PixelPos.xy];

		if (VisibleClusterIndex != 0xFFFFFFFF)
		{
			FVisibleCluster VisibleCluster = GetVisibleCluster(VisibleClusterIndex);
			const FInstanceSceneData InstanceData = GetInstanceData(VisibleCluster);
			const FCluster ClusterData = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);
			const uint MaterialDepthId = GetMaterialDepthId(ClusterData, InstanceData.PrimitiveId, TriIndex, MaterialDepthTable);
			const float NaniteDepth = asfloat(DepthInt);

			if (NaniteDepth >= SceneDepthValue)
			{
				MaterialDepthValue = asfloat(MaterialDepthId);
				SceneDepthValue = NaniteDepth;
				SceneDepth[PixelPos.xy] = SceneDepthValue;

				uint OutStencil = 0;
				// TODO: Move this into 'NaniteMask' to avoid an extra cluster decode, and to touch less memory
				// by skipping the vbuffer (64b -> 8b)
				if (GetPrimitiveData(InstanceData.PrimitiveId).DecalReceiverMask > 0 && View.ShowDecalsMask > 0)
				{
					OutStencil = DepthExportConfig.z;
				}

				//@todo - proper support
				OutStencil |= 1 << LIGHTING_CHANNELS_TEXTURE_DISTANCE_FIELD_REPRESENTATION_BIT;
				SceneStencil[PixelPos.xy] = OutStencil;

				// TODO: Velocity
			#if 0
				FInstanceDynamicData InstanceDynamicData = CalculateInstanceDynamicData(NaniteView, InstanceData);

				const float4 ScreenPos = SvPositionToScreenPosition(float4(SvPosition.xy, asfloat(DepthInt), 1.0f));
				const float3 WorldPos  = SvPositionToWorld(float4(SvPosition.xy, asfloat(DepthInt), 1.0f));
				const float4 LocalPos  = mul(float4(WorldPos.xyz, 1.0f), InstanceData.WorldToLocal);

				const float4 ScreenPosPrev = mul(float4(LocalPos.xyz, 1), InstanceDynamicData.PrevLocalToClip);
		
				Velocity[PixelPos.xy] = EncodeVelocityToTexture(Calculate3DVelocity(ScreenPos, ScreenPosPrev));
			#endif

				NaniteMask[PixelPos.xy] = 0x1;
			}
		}

		GroupMemoryBarrierWithGroupSync();

		const float TileMinSceneDepth = WaveActiveMin(SceneDepthValue);
		const float TileMaxSceneDepth = WaveActiveMax(SceneDepthValue);

		const float TileMinMaterialDepth = WaveActiveMin(MaterialDepthValue);
		const float TileMaxMaterialDepth = WaveActiveMax(MaterialDepthValue);

		if (WaveIsFirstLane())
		{
			SceneHTile[TileIndex] = EncodeTileMinMaxDepth(TileMinSceneDepth, TileMaxSceneDepth, PlatformConfig);
			MaterialHTile[TileIndex] = EncodeTileMinMaxDepth(TileMinMaterialDepth, TileMaxMaterialDepth, PlatformConfig);
		}
	}
	else if (WaveIsFirstLane())
	{
		MaterialHTile[TileIndex] = EncodeTileMinMaxDepth(0.0f, 0.0f, PlatformConfig);
	}

	MaterialDepth[PixelPos.xy] = MaterialDepthValue;
}

// NOTE: A possible further optimization could be to avoid doing a clear depth target clear for materials
//		 and instead set an empty tile's htile encoding to zmask=0x0 to represent a clear tile, and just
//		 set the min/max z values to 0.0 - In theory, the depth clear value is in a global register, so
//		 the zmask=0x0 should just ignore the rest of the encoding. The behavior on GCN around this isn't 
//		 really documented, so we probably need to do a test where we set the target to clear, make the
//		 zrange 1.0/1.0 and the depth clear value 0.0. Then render something at z=0.5 and see what happens.

#else

[numthreads(8, 8, 1)]
void DepthExport(uint3 PixelPos : SV_DispatchThreadID)
{
}

#endif