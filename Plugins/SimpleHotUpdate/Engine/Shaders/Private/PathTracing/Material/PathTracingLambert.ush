// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingLambert.usf: Lambertian BRDF sampling functions 
===============================================================================================*/
#pragma once

void Lambert_SampleMaterial(
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	out float3 OutDirection,
	out float3 OutWeight,
	out float OutPdf)
{
	float3 N_World = GetWorldNormal(Payload);

	float4 SampledValue = CosineSampleHemisphere(RandSample.xy);
	OutDirection = TangentToWorld(SampledValue.xyz, N_World);

	OutWeight = GetBaseColor(Payload);
	OutPdf = SampledValue.w;
}

float Lambert_Pdf(float3 OutgoingDirection, FMaterialClosestHitPayload Payload)
{
	float3 N_World = GetWorldNormal(Payload);
	float NoL = saturate(dot(N_World, OutgoingDirection));
	return NoL / PI;
}

void Lambert_EvalMaterial(
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutWeight,
	out float OutPdf
)
{
	float3 N_World = GetWorldNormal(Payload);
	float NoL = saturate(dot(N_World, OutgoingDirection));

	OutWeight = GetBaseColor(Payload);
	OutPdf = NoL / PI;
}
